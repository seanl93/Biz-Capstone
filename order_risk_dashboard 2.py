# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install streamlit

import streamlit as st
import pandas as pd
from textblob import TextBlob
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.feature_selection import RFE
import numpy as np

# Load external data
uploaded_file = st.file_uploader("Upload your order dataset", type=["csv"])

if uploaded_file:
    df = pd.read_csv(uploaded_file)

    # Clean and process the data
    df = df.dropna(subset=['Status', 'ship-service-level', 'Item Total'])
    df['cancelled'] = df['Status'].apply(lambda x: 1 if 'CANCELLED' in x else 0)

    # Compute sentiment if review text is available
    if 'review_text' in df.columns:
        df['sentiment'] = df['review_text'].apply(lambda x: TextBlob(str(x)).sentiment.polarity)
    else:
        df['sentiment'] = 0.0  # placeholder

    # Encode categorical variables
    for col in ['Category', 'ship-service-level']:
        df[col + '_encoded'] = LabelEncoder().fit_transform(df[col].astype(str))

    # Prepare features
    feature_cols = ['rating', 'sentiment', 'Item Total', 'Category_encoded', 'ship-service-level_encoded']
    available_features = [col for col in feature_cols if col in df.columns]
    features = df[available_features]
    labels = df['cancelled']

    # Fill missing values
    features = features.fillna(0)

    X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=42)

    model = LogisticRegression(max_iter=1000)
    model.fit(X_train, y_train)

    df['risk_score'] = model.predict_proba(features)[:, 1]

    # Streamlit UI
    st.title("Order Cancellation Risk Analysis Dashboard")

    threshold = st.sidebar.slider("Set Risk Threshold", 0.0, 1.0, 0.5, 0.05)
    filtered = df[df['risk_score'] >= threshold]

    st.subheader("📦 High-Risk Orders")
    st.dataframe(filtered[['Order ID', 'Category', 'ship-service-level', 'Item Total', 'risk_score']])

    def recommend_action(risk):
        if risk > 0.8:
            return "Offer expedited shipping or manual review"
        elif risk > 0.6:
            return "Send reassurance email with FAQs"
        else:
            return "No action needed"

    filtered['AI_Suggestion'] = filtered['risk_score'].apply(recommend_action)

    st.subheader("🧠 AI-Suggested Actions")
    st.dataframe(filtered[['Order ID', 'ship-service-level', 'Item Total', 'risk_score', 'AI_Suggestion']])

    # Feature Importance
    st.subheader("🔍 Top 5 Features Driving Cancellations")
    if len(available_features) >= 5:
        rfe = RFE(model, n_features_to_select=5)
        rfe.fit(X_train, y_train)
        top_features = [available_features[i] for i in range(len(available_features)) if rfe.support_[i]]
        st.write(top_features)
    else:
        st.write("Not enough features to show importance")

    # Overall sentiment
    st.subheader("💬 Overall Review Sentiment")
    avg_sentiment = df['sentiment'].mean()
    st.metric(label="Average Sentiment Score", value=round(avg_sentiment, 3))